{"version":3,"sources":["webpack:///./src/classes/EffectsRepository.js?2ba1","webpack:///./src/classes/effects/point/Levels.js?874d"],"names":["availableEffects","add","_class","getName","EffectsRepository","name","LevelsEffect","low","high","lowOutput","highOutput","parameters","width","height","imageData","Histogram","offset","stride","i","j","index","x","y","histogram","Array","minValue","maxValue","minFrequency","maxFrequency","mean","numSamples","isGray","RED","GREEN","BLUE","GRAY","length","data","Infinity","Math","min","max","getNumSamples","getFrequency","channel","value","getMinFrequency","getMaxFrequency","getMinValue","getMaxValue","getMeanValue","pixels","scale","lut","pixel","r","g","b","a"],"mappings":"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","file":"0.1d7c9676098869ba6447.hot-update.js","sourcesContent":["import GrayScale from './effects/point/GrayScale';\nimport Sepia from './effects/point/Sepia';\nimport Contrast from './effects/point/Contrast';\nimport Brightness from './effects/point/Brightness';\nimport Diffusion from './effects/point/Diffusion';\nimport Dither from './effects/point/Dither';\nimport Exposure from './effects/point/Exposure';\nimport Gain from './effects/point/Gain';\nimport Gamma from './effects/point/Gamma';\nimport HSBAdjust from './effects/point/HSBAdjust';\nimport InvertAlpha from './effects/point/InvertAlpha';\nimport Invert from './effects/point/Invert';\nimport Levels from './effects/point/Levels';\n\nlet availableEffects = {};\n\nfunction add(_class) {\n    availableEffects[_class.getName()] = _class;\n}\n\nadd(GrayScale);\nadd(Sepia);\nadd(Contrast);\nadd(Brightness);\nadd(Diffusion);\nadd(Dither);\nadd(Exposure);\nadd(Gain);\nadd(Gamma);\nadd(HSBAdjust);\nadd(InvertAlpha);\nadd(Invert);\nadd(Levels);\n\nclass EffectsRepository {\n    static get(name) {\n        return availableEffects[name];\n    }\n}\n\nexport default EffectsRepository;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/EffectsRepository.js","import BasePointEffect from '../BasePoint';\nimport {\n    RGBtoHSB,\n    HSBtoRGB\n} from '../../../helpers/color';\n\nclass LevelsEffect extends BasePointEffect {\n    static getName() {\n        return 'levels';\n    }\n\n    getDefaultParameters() {\n        return {\n            low: 0,\n            high: 1,\n            lowOutput: 0,\n            highOutput: 1\n        };\n    }\n\n    before(parameters, width, height, imageData) {\n        let Histogram = function (imageData, width, height, offset, stride) {\n            let i, j, index,\n                x, y,\n                histogram = new Array(3),\n                minValue = new Array(4),\n                maxValue = new Array(4),\n                minFrequency = new Array(3),\n                maxFrequency = new Array(3),\n                mean = new Array(3),\n                numSamples = width * height,\n                isGray = true,\n                RED = 0,\n                GREEN = 1,\n                BLUE = 2,\n                GRAY = 3;\n\n            for (i = 0; i < histogram.length; i += 1) {\n                histogram[i] = new Array(256);\n                for (j = 0; j < 256; j += 1) {\n                    histogram[i][j] = 0;\n                }\n            }\n\n            for (y = 0; y < height; y += 1) {\n                for (x = 0; x < width; x += 1) {\n                    index = y * width * 4 + x * 4;\n                    histogram[RED][imageData.data[index]]++;\n                    histogram[GREEN][imageData.data[index + 1]]++;\n                    histogram[BLUE][imageData.data[index + 2]]++;\n                }\n            }\n\n            for (i = 0; i < 256; i += 1) {\n                if (histogram[RED][i] !== histogram[GREEN][i] || histogram[GREEN][i] !== histogram[BLUE][i]) {\n                    isGray = false;\n                    break;\n                }\n            }\n\n            for (i = 0; i < 3; i += 1) {\n                for (j = 0; j < 256; j += 1) {\n                    if (histogram[i][j] > 0) {\n                        minValue[i] = j;\n                        break;\n                    }\n                }\n                for (j = 255; j >= 0; j -= 1) {\n                    if (histogram[i][j] > 0) {\n                        maxValue[i] = j;\n                        break;\n                    }\n                }\n                minFrequency[i] = Infinity;\n                maxFrequency[i] = 0;\n                for (j = 0; j < 256; j += 1) {\n                    minFrequency[i] = Math.min(minFrequency[i], histogram[i][j]);\n                    maxFrequency[i] = Math.max(maxFrequency[i], histogram[i][j]);\n                    mean[i] += j * histogram[i][j];\n                }\n                mean[i] /= numSamples;\n                minValue[GRAY] = Math.min(minValue[RED], minValue[GREEN], minValue[BLUE]);\n                maxValue[GRAY] = Math.max(maxValue[RED], maxValue[GREEN], maxValue[BLUE]);\n            }\n\n            this.getNumSamples = function () {\n                return numSamples;\n            };\n\n            this.isGray = function () {\n                return isGray;\n            };\n\n            this.getFrequency = function (channel, value) {\n                if (!value) {\n                    if (numSamples > 0 && isGray && value >= 0 && value <= 255) {\n                        return histogram[0][value];\n                    }\n                    return -1;\n                }\n                if (numSamples < 1 || channel < 0 || channel > 2 || value < 0 || value > 255) {\n                    return -1;\n                }\n                return histogram[channel][value];\n            };\n\n            this.getMinFrequency = function (channel) {\n                if (!channel) {\n                    if (numSamples > 0 && isGray) {\n                        return minFrequency[0];\n                    }\n                    return -1;\n                }\n                if (numSamples < 1 || channel < 0 || channel > 2) {\n                    return -1;\n                }\n                return minFrequency[channel];\n            };\n\n            this.getMaxFrequency = function (channel) {\n                if (!channel) {\n                    if (numSamples > 0 && isGray) {\n                        return maxFrequency[0];\n                    }\n                    return -1;\n                }\n                if (numSamples < 1 || channel < 0 || channel > 2) {\n                    return -1;\n                }\n                return maxFrequency[channel];\n            };\n\n            this.getMinValue = function (channel) {\n                if (!channel) {\n                    if (numSamples > 0 && isGray) {\n                        return minValue[0];\n                    }\n                    return -1;\n                }\n                return minValue[channel];\n            };\n\n            this.getMaxValue = function (channel) {\n                if (!channel) {\n                    if (numSamples > 0 && isGray) {\n                        return maxValue[0];\n                    }\n                    return -1;\n                }\n                return maxValue[channel];\n            };\n\n            this.getMeanValue = function (channel) {\n                if (!channel) {\n                    if (numSamples > 0 && isGray) {\n                        return mean[0];\n                    }\n                    return -1;\n                }\n                return mean[channel];\n            }\n        };\n\n        let histogram = new Histogram(pixels, width, height, 0, width),\n            scale = 255 / histogram.getNumSamples(),\n            lut = new Array(3),\n            low = parameters.low * 255,\n            high = parameters.high * 255,\n            i, j;\n\n        for (i = 0; i < lut.length; i += 1) {\n            lut[i] = new Array(256);\n        }\n        if (low === high) {\n            high++;\n        }\n\n        for (i = 0; i < 3; i += 1) {\n            for (j = 0; j < 256; j += 1) {\n                lut[i][j] = (255 * (parameters.lowOutput + (parameters.highOutput - parameters.lowOutput) * (j - low) / (high - low)))\n            }\n        }\n\n        return {\n            lut: lut\n        }\n    }\n\n    callback(pixel, x, y, parameters, width, height) {\n        return {\n            r: this.data.lut[0][pixel.r],\n            g: this.data.lut[1][pixel.g],\n            b: this.data.lut[2][pixel.b],\n            a: pixel.a\n        };\n    }\n}\n\nexport default LevelsEffect;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/effects/point/Levels.js"],"sourceRoot":""}